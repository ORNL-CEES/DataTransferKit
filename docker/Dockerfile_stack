from ubuntu:16.04

ARG NPROC=4

RUN apt-get update && apt-get install -y \
        build-essential \
        gfortran \
        libopenmpi-dev \
        curl \
        cmake \
        git \
        wget \
        vim \
        emacs \
        autoconf \
        lcov \
        valgrind \
        ccache \
        cppcheck \
        libssl-dev \
        libpng-dev \
        libfreetype6-dev \
        libxft-dev \
        libsqlite3-dev \
        libbz2-dev \
        libatlas-base-dev \
        zlib1g-dev \
        python2.7-dev \
        ninja-build \
        python-sphinx \
        python-pip \
        doxygen \
        && \
    echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-4.0 main" > /etc/apt/sources.list.d/llvm.list && \
    wget -q -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    apt-get update && apt-get install -y \
        clang-4.0 \
        clang-format-4.0 \
        clang-tidy-4.0 \
        && \
    apt-get install -y software-properties-common && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    apt-get update && apt-get install -y \
        gcc-7 \
        g++-7 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade --no-cache-dir pip && \
    pip install --no-cache-dir sphinx==1.4 sphinx_rtd_theme breathe==4.6 && \
    echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-4.0 main" > /etc/apt/sources.list.d/llvm.list && \
    wget -q -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    apt-get update && apt-get install -y clang-format-4.0 clang-tidy-4.0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV PREFIX=/scratch
RUN mkdir -p ${PREFIX} && \
    cd ${PREFIX} && \
    mkdir archive && \
    mkdir source && \
    mkdir build && \
    mkdir install

# Install OpenMP runtime library
RUN export OPENMP_VERSION=4.0.0 && \
    export OPENMP_URL=http://releases.llvm.org/${OPENMP_VERSION}/openmp-${OPENMP_VERSION}.src.tar.xz && \
    export OPENMP_ARCHIVE=${PREFIX}/archive/openmp-${OPENMP_VERSION}.src.tar.xz && \
    export OPENMP_SOURCE_DIR=${PREFIX}/source/openmp/${OPENMP_VERSION} && \
    export OPENMP_BUILD_DIR=${PREFIX}/build/openmp/${OPENMP_VERSION} && \
    wget --quiet ${OPENMP_URL} --output-document=${OPENMP_ARCHIVE} && \
    mkdir -p ${OPENMP_SOURCE_DIR} && \
    tar -xf ${OPENMP_ARCHIVE} -C ${OPENMP_SOURCE_DIR} --strip-components=1 && \
    mkdir -p ${OPENMP_BUILD_DIR} && \
    cd ${OPENMP_BUILD_DIR} && \
    cmake \
        -D CMAKE_C_COMPILER=clang-4.0 \
        -D CMAKE_CXX_COMPILER=clang++-4.0 \
        ${OPENMP_SOURCE_DIR} \
        && \
    make -j${NPROC} install && \
    rm -rf ${OPENMP_ARCHIVE} && \
    rm -rf ${OPENMP_BUILD_DIR} && \
    rm -rf ${OPENMP_SOURCE_DIR}

# install Boost
RUN export BOOST_URL=https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.bz2 && \
    export BOOST_SHA256=9807a5d16566c57fd74fb522764e0b134a8bbe6b6e8967b83afefd30dcd3be81 && \
    export BOOST_ARCHIVE=${PREFIX}/archive/boost_1_65_1.tar.bz2 && \
    export BOOST_SOURCE_DIR=${PREFIX}/source/boost/1.65.1 && \
    export BOOST_BUILD_DIR=${PREFIX}/build/boost/1.65.1 && \
    export BOOST_INSTALL_DIR=/opt/boost/1.65.1 && \
    wget --quiet ${BOOST_URL} --output-document=${BOOST_ARCHIVE} && \
    echo "${BOOST_SHA256} ${BOOST_ARCHIVE}" | sha256sum -c && \
    mkdir -p ${BOOST_SOURCE_DIR} && \
    tar -xf ${BOOST_ARCHIVE} -C ${BOOST_SOURCE_DIR} --strip-components=1 && \
    cd ${BOOST_SOURCE_DIR} && \
    ./bootstrap.sh \
        --prefix=${BOOST_INSTALL_DIR} \
        && \
    echo "using mpi ;" >> project-config.jam && \
    ./b2 install -j${NPROC} \
        link=shared \
        variant=release \
        --build-dir=${BOOST_BUILD_DIR} \
        && \
    rm -rf ${BOOST_ARCHIVE} && \
    rm -rf ${BOOST_BUILD_DIR} && \
    rm -rf ${BOOST_SOURCE_DIR}

ENV BOOST_DIR=/opt/boost/1.65.1

# install HDF5
RUN export HDF5_VERSION=1.10.1 && \
    export HDF5_URL=http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.bz2 && \
    export HDF5_MD5=d89893c05ee7ea8611b51bb39450d64e && \
    export HDF5_ARCHIVE=${PREFIX}/archive/hdf5-${HDF5_VERSION}.tar.bz2 && \
    export HDF5_SOURCE_DIR=${PREFIX}/source/hdf5/${HDF5_VERSION} && \
    export HDF5_BUILD_DIR=${PREFIX}/build/hdf5/${HDF5_VERSION} && \
    export HDF5_INSTALL_DIR=/opt/hdf5/${HDF5_VERSION} && \
    wget --quiet ${HDF5_URL} --output-document=${HDF5_ARCHIVE} && \
    echo "${HDF5_MD5} ${HDF5_ARCHIVE}" | md5sum -c && \
    mkdir -p ${HDF5_SOURCE_DIR} && \
    tar -xf ${HDF5_ARCHIVE} -C ${HDF5_SOURCE_DIR} --strip-components=1 && \
    mkdir -p ${HDF5_BUILD_DIR} && \
    cd ${HDF5_BUILD_DIR} && \
    ${HDF5_SOURCE_DIR}/configure \
        --prefix=${HDF5_INSTALL_DIR} \
        --enable-shared \
        --disable-static \
        --enable-parallel \
        && \
    make -j${NPROC} install && \
    rm -rf ${HDF5_ARCHIVE} && \
    rm -rf ${HDF5_BUILD_DIR} && \
    rm -rf ${HDF5_SOURCE_DIR}

ENV HDF5_DIR=/opt/hdf5/1.10.1

# install NetCDF
RUN export NETCDF_VERSION=4.4.1.1 && \
    export NETCDF_URL=ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-${NETCDF_VERSION}.tar.gz && \
    export NETCDF_ARCHIVE=${PREFIX}/archive/netcdf-${NETCDF_VERSION}.tar.gz && \
    export NETCDF_SOURCE_DIR=${PREFIX}/source/netcdf/${NETCDF_VERSION} && \
    export NETCDF_BUILD_DIR=${PREFIX}/build/netcdf/${NETCDF_VERSION} && \
    export NETCDF_INSTALL_DIR=/opt/netcdf/${NETCDF_VERSION} && \
    wget --quiet ${NETCDF_URL} --output-document=${NETCDF_ARCHIVE} && \
    mkdir -p ${NETCDF_SOURCE_DIR} && \
    tar -xf ${NETCDF_ARCHIVE} -C ${NETCDF_SOURCE_DIR} --strip-components=1 && \
    mkdir -p ${NETCDF_BUILD_DIR} && \
    cd ${NETCDF_BUILD_DIR} && \
    ${NETCDF_SOURCE_DIR}/configure \
        --prefix=${NETCDF_INSTALL_DIR} \
        --enable-netcdf-4 \
        --enable-shared \
        --disable-static \
        CC=/usr/bin/mpicc \
        CFLAGS="-I${HDF5_DIR}/include" \
        LDFLAGS="-L${HDF5_DIR}/lib -lhdf5" \
        && \
    make -j${NPROC} install && \
    rm -rf ${NETCDF_ARCHIVE} && \
    rm -rf ${NETCDF_BUILD_DIR} && \
    rm -rf ${NETCDF_SOURCE_DIR}

ENV NETCDF_DIR=/opt/netcdf/4.4.1.1

# install PETSc
RUN export PETSC_VERSION=3.6.4 && \
    export PETSC_URL=http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-${PETSC_VERSION}.tar.gz && \
    export PETSC_ARCHIVE=${PREFIX}/archive/petsc-${PETSC_VERSION}.tar.gz && \
    export PETSC_SOURCE_DIR=${PREFIX}/source/petsc/${PETSC_VERSION} && \
    export PETSC_BUILD_DIR=${PREFIX}/build/petsc/${PETSC_VERSION} && \
    export PETSC_INSTALL_DIR=/opt/petsc/${PETSC_VERSION} && \
    wget --quiet ${PETSC_URL} --output-document=${PETSC_ARCHIVE} && \
    mkdir -p ${PETSC_SOURCE_DIR} && \
    tar -xf ${PETSC_ARCHIVE} -C ${PETSC_SOURCE_DIR} --strip-components=1 && \
    mkdir -p ${PETSC_BUILD_DIR} && \
    cd  ${PETSC_SOURCE_DIR} && \
    ${PETSC_SOURCE_DIR}/configure \
        --prefix=${PETSC_INSTALL_DIR} \
        --with-shared-libraries \
        --with-cc=/usr/bin/mpicc \
        --with-cxx=/usr/bin/mpicxx \
        --with-fc=/usr/bin/mpifort \
        --with-debugging=0 \
        && \
    make MAKE_NP=${NPROC} && \
    make MAKE_NP=${NPROC} install && \
    rm -rf ${PETSC_ARCHIVE} && \
    rm -rf ${PETSC_BUILD_DIR} && \
    rm -rf ${PETSC_SOURCE_DIR}

ENV PETSC_DIR=/opt/petsc/3.6.4

# install libMesh
RUN export LIBMESH_VERSION=1.2.0 && \
    export LIBMESH_URL=https://github.com/libMesh/libmesh/releases/download/v${LIBMESH_VERSION}/libmesh-${LIBMESH_VERSION}.tar.bz2 && \
    export LIBMESH_ARCHIVE=${PREFIX}/archive/libmesh-${LIBMESH_VERSION}.tar.bz2 && \
    export LIBMESH_SOURCE_DIR=${PREFIX}/source/libmesh/${LIBMESH_VERSION} && \
    export LIBMESH_BUILD_DIR=${PREFIX}/build/libmesh/${LIBMESH_VERSION} && \
    export LIBMESH_INSTALL_DIR=/opt/libmesh/${LIBMESH_VERSION} && \
    wget --quiet ${LIBMESH_URL} --output-document=${LIBMESH_ARCHIVE} && \
    mkdir -p ${LIBMESH_SOURCE_DIR} && \
    tar -xf ${LIBMESH_ARCHIVE} -C ${LIBMESH_SOURCE_DIR} --strip-components=1 && \
    mkdir -p  ${LIBMESH_BUILD_DIR} && \
    cd  ${LIBMESH_BUILD_DIR} && \
    ${LIBMESH_SOURCE_DIR}/configure \
        --prefix=${LIBMESH_INSTALL_DIR} \
        --enable-unique_id \
        --disable-hdf5 \
        --with-methods="opt" \
        && \
    make -j${NPROC} install && \
    rm -rf ${LIBMESH_ARCHIVE} && \
    rm -rf ${LIBMESH_BUILD_DIR} && \
    rm -rf ${LIBMESH_SOURCE_DIR}


ENV LIBMESH_DIR=/opt/libmesh/1.2.0

# download Trilinos
# git clone --depth 1 only works for the last commit -> use a tarball instead
# Note: the commit hash provided below has been tagged `trilinos-release-12-12-1` on GitHub
RUN export TRILINOS_HASH=89b8c7f016c247568f7c9c1f32d250c8d2683de0 && \
    export TRILINOS_SHORT_HASH=89b8c7f && \
    export TRILINOS_URL=https://github.com/trilinos/Trilinos/archive/${TRILINOS_HASH}.tar.gz && \
    export TRILINOS_ARCHIVE=${PREFIX}/archive/trilinos-${TRILINOS_HASH}.tar.xz && \
    export TRILINOS_SOURCE_DIR=${PREFIX}/source/trilinos/${TRILINOS_SHORT_HASH} && \
    export TRILINOS_BUILD_DIR=${PREFIX}/build/trilinos/${TRILINOS_SHORT_HASH} && \
    export TRILINOS_INSTALL_DIR=${PREFIX}/install/trilinos/${TRILINOS_SHORT_HASH} && \
    wget --quiet ${TRILINOS_URL} --output-document=${TRILINOS_ARCHIVE} && \
    mkdir -p ${TRILINOS_SOURCE_DIR} && \
    tar -xf ${TRILINOS_ARCHIVE} -C ${TRILINOS_SOURCE_DIR} --strip-components=1 && \
    ln -s ${TRILINOS_SOURCE_DIR} ${PREFIX}/source/trilinos/release && \
    mkdir -p ${TRILINOS_BUILD_DIR} && \
    rm -rf ${TRILINOS_ARCHIVE}

ENV TRILINOS_DIR=/scratch/source/trilinos/release


# download Kokkos-Tools
# sh does not support arrays so we need to use bash
ENV KOKKOS_TOOLS_SHORT_HASH=7ee5bcb
RUN ["/bin/bash","-c","export KOKKOS_TOOLS_HASH=7ee5bcb80a8329c8493da735bc7bad5a859dfb1f && \
    export KOKKOS_TOOLS_ARRAY=(\"kernel-filter\" \
                               \"kernel-logger\" \
                               \"memory-events\" \
                               \"memory-hwm-mpi\" \
                               \"memory-hwm\" \
                               \"memory-usage\" \
                               \"simple-kernel-timer-json\" \
                               \"simple-kernel-timer\" \
                               \"space-time-stack\" \
                              ) && \
    export KOKKOS_TOOLS_URL=https://github.com/kokkos/kokkos-tools/archive/${KOKKOS_TOOLS_HASH}.tar.gz && \
    export KOKKOS_TOOLS_ARCHIVE=${PREFIX}/archive/kokkos-tools-${KOKKOS_TOOLS_HASH}.tar.xz && \
    export KOKKOS_TOOLS_SOURCE_DIR=${PREFIX}/source/kokkos-tools/${KOKKOS_TOOLS_SHORT_HASH} && \
    wget --quiet ${KOKKOS_TOOLS_URL} --output-document=${KOKKOS_TOOLS_ARCHIVE} && \
    mkdir -p ${KOKKOS_TOOLS_SOURCE_DIR} && \
    tar -xf ${KOKKOS_TOOLS_ARCHIVE} -C ${KOKKOS_TOOLS_SOURCE_DIR} --strip-components=1 && \
    cd ${KOKKOS_TOOLS_SOURCE_DIR}/src/tools && \
    for tool in ${KOKKOS_TOOLS_ARRAY[@]}; do cd $tool && make && cd ../; done && \
    rm -rf ${KOKKOS_TOOLS_ARCHIVE}"]

ENV KOKKOS_TOOLS_DIR=/scratch/source/kokkos-tools/${KOKKOS_TOOLS_SHORT_HASH}/src/tools


# append the option flag --allow-run-as-root to mpiexec
RUN echo '#!/usr/bin/env bash' > /usr/local/bin/mpiexec && \
    echo '/usr/bin/mpiexec --allow-run-as-root "$@"' >> /usr/local/bin/mpiexec && \
    chmod +x /usr/local/bin/mpiexec

# setup vim
COPY .vimrc /root/.vimrc
RUN git clone https://github.com/VundleVim/Vundle.vim.git /root/.vim/bundle/Vundle.vim && \
    vim +PluginInstall +qall && \
    cd /root/.vim/bundle/YouCompleteMe && \
    BOOST_ROOT=${BOOST_DIR} ./install.py --clang-completer --system-libclang --system-boost
