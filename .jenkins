pipeline {
  agent none
    environment {
      // Get rid of Read -1, expected <someNumber>, errno =1 error
      // See https://github.com/open-mpi/ompi/issues/4948
      OMPI_MCA_btl_vader_single_copy_mechanism = 'none'
      // Remove warning: "A high-performance Open MPI point-to-point
      // messaging module was unable to find any relevant network
      // interfaces."
      OMPI_MCA_btl_base_warn_component_unused = '0'
      // Run MPI as root
      OMPI_ALLOW_RUN_AS_ROOT = '1'
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM = '1'
    }

  stages {
    stage('Test') {
      parallel {
        stage('CUDA-10.2') {
          agent {
            dockerfile {
              filename "Dockerfile"
              dir "docker"
              label 'nvidia-docker && volta'
            }
          }
          environment {
            OMPI_CXX = '/opt/trilinos/bin/nvcc_wrapper'
          }
          steps {
            sh 'rm -rf build && mkdir -p build'
              dir('build') {
                sh '''
                  cmake \
                  -D BUILD_SHARED_LIBS=ON \
                  -D CMAKE_BUILD_TYPE=Debug \
                  -D DataTransferKit_ENABLE_DataTransferKit=ON \
                  -D DataTransferKit_ENABLE_TESTS=ON \
                  -D TPL_Trilinos_DIR=${TRILINOS_DIR} \
                  -D TPL_BoostOrg_INCLUDE_DIRS=${BOOST_DIR}/include \
                  -D CMAKE_CXX_EXTENSIONS=OFF \
                  -D CMAKE_CXX_FLAGS="--expt-extended-lambda" \
                  -D DataTransferKit_ENABLE_OpenMP=ON \
                  ..
                '''
                sh 'make VERBOSE=1 -j8'
                sh 'ctest --no-compress-output -T Test'
              }
          }
          post {
            always {
              xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            }
          }
        }
        stage('HIP-ROCm-4.2') {
          agent {
            dockerfile {
                filename 'Dockerfile.hipcc'
                dir 'docker'
                label 'rocm-docker && vega && AMD_Radeon_Instinct_MI100'
                args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'
            }
          }
          environment {
            OMPI_CXX = 'hipcc'
          }
          steps {
              sh 'echo "/opt/rocm/llvm/lib" > /etc/ld.so.conf.d/llvm.conf && ldconfig'
              sh '''rm -rf build && mkdir -p build && cd build && \
                  cmake \
                  -D BUILD_SHARED_LIBS=ON \
                  -D CMAKE_BUILD_TYPE=Debug \
                  -D DataTransferKit_ENABLE_DataTransferKit=ON \
                  -D DataTransferKit_ENABLE_TESTS=ON \
                  -D TPL_Trilinos_DIR=${TRILINOS_DIR} \
                  -D TPL_BoostOrg_INCLUDE_DIRS=${BOOST_DIR}/include \
                  -D CMAKE_CXX_EXTENSIONS=OFF \
                  -D DataTransferKit_ENABLE_OpenMP=ON \
                  .. && \
                make VERBOSE=1 -j8 && \
                ctest --no-compress-output -T Test
                '''
          }
          post {
              always {
              xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
              }
          }
          }
      }
    }
  }
}
